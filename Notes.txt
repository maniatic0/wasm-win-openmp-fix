// Inside void __kmp_env_initialize(char const *string) in kmp_settings.cpp
// Where it starts

kmp_msg_t m =
      __kmp_msg_format(kmp_i18n_msg_AffFormatDefault, "%P", "%i", "%n", "%A"); // <-- this fails allocating memory until crash

// This leads to kmp_str.cpp

int __kmp_str_buf_vprint(kmp_str_buf_t *buffer, char const *format,
                         va_list args) {
  int rc;
  KMP_STR_BUF_INVARIANT(buffer);

  for (;;) {
    int const free = buffer->size - buffer->used;
    int size;

    // Try to format string.
    {
      /* On Linux* OS Intel(R) 64, vsnprintf() modifies args argument, so
         vsnprintf() crashes if it is called for the second time with the same
         args. To prevent the crash, we have to pass a fresh intact copy of args
         to vsnprintf() on each iteration.

         Unfortunately, standard va_copy() macro is not available on Windows*
         OS. However, it seems vsnprintf() does not modify args argument on
         Windows* OS.
      */

#if !KMP_OS_WINDOWS
      va_list _args;
      va_copy(_args, args); // Make copy of args.
#define args _args // Substitute args with its copy, _args.
#endif // KMP_OS_WINDOWS
      rc = KMP_VSNPRINTF(buffer->str + buffer->used, free, format, args); // <--- Problem here, buffer is "OMP: pid %1!s! tid %2!s! thread %3!s! bound to OS proc set {%4!s!}"
#if !KMP_OS_WINDOWS
#undef args // Remove substitution.
      va_end(_args);
#endif // KMP_OS_WINDOWS
    }

    // No errors, string has been formatted.
    if (rc >= 0 && rc < free) {
      buffer->used += rc;
      break;
    }

    // Error occurred, buffer is too small.
    if (rc >= 0) {
      // C99-conforming implementation of vsnprintf returns required buffer size
      size = buffer->used + rc + 1;
    } else {
      // Older implementations just return -1. Double buffer size.
      size = buffer->size * 2; // <---- negative numbers are an enconding issue, in this case the use of '!'
    }

    // Enlarge buffer.
    __kmp_str_buf_reserve(buffer, size);

    // And try again.
  }

  KMP_DEBUG_ASSERT(buffer->size > 0);
  KMP_STR_BUF_INVARIANT(buffer);
  return rc;
} // __kmp_str_buf_vprint

// kmp_i18n_msg_AffFormatDefault comes from kmp_i18n_default.inc
// Which is generated by message-converter.py from en_US.txt

class Message(object):
    special = {
        "n": "\n",
        "t": "\t",
    }

    def __init__(self, lineNumber, name, text):
        self.lineNumber = lineNumber
        self.name = name
        self.text = text

    def toSrc(self):
        if platform.system() == "Windows": // <--- This is a problem if you are cross compiling from Windows as EMSCRIPTEN is a pseudo Unix like system
            return re.sub(r"%([0-9])\$(s|l?[du])", r"%\1!\2!", self.text)
        return str(self.text)

    def toMC(self):
        retval = self.toSrc()
        for special, substitute in Message.special.items():
            retval = re.sub(r"\\{}".format(special), substitute, retval)
        return retval

\\ Reverse replace with 
re.sub(r"%([0-9])!(s|l?[du])!", r"%\1$\2", line)
